/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "io.h"
void delay (int ms);
int sevenseg (int Disp);
int main()
{
 int state;
  //short int i,j,k,l;
  printf("Hello from Nios II!\n");
  //PIO Setup

  state = IORD_ALTERA_AVALON_PIO_DATA(SW_BASE);


  //Switch Counter setup
//  switch(state)
//  {
//      case 0: break;
//      case 1:
  int count = 0;
   while(count<9999)
   {

	   count++;

    for (i = 0; i <= 9; i++)
      {
       printf(" i = %d\n",i);
        IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG3_BASE, sevenseg (i) );
        delay(2000);
//        for ( j = 0; j <= 9; j++)
//        {
//          //  printf(" j= %d\n",j);
//            IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG2_BASE, sevenseg (j) );
//          for ( k = 0; k <= 9; k++)
//          {
//            //  printf(" k = %d\n",k);
//              IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG1_BASE, sevenseg (k) );
//            for ( l = 0; l <= 9; l++)
//    				{
//    			//	 printf(" l = %d ",l);
//    				 IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG0_BASE,sevenseg (l));
//    				}
//
//          }
//
//        }
//      }

   }
//             state = 0;
//             break;
//      default:
//      break;
  }
  //Display

   return 0;
}

void delay (int ms)
{
	int var = 0;
	for ( var = 0; var < ms; var++) {

	}
}
int sevenseg (int Disp)
{
	int out;
  switch (Disp)
       {
           case 0:
        	   	   out = 0xC0;
             break;
           case 1:
        	   	   out = 0xF9;
             break;

           case 2:
           	   	   out = 0xA4;
           	 break;

           case 3:
        	   	   out = 0xB0;
              break;
           case 4:
        	   	   out = 0x99;
              break;
           case 5:
        	   	   out = 0x92;
              break;
           case 6:
        	   	   out = 0x82;
            break;
           case 7:
        	   	   out = 0xF8;
           break;

           case 8:
        	   	   out = 0x80;
           break;

           case 9:
        	   	   out = 0x4C;
           break;
           default: out = 0xC0;
             break;
       }
  	  return out;
}
